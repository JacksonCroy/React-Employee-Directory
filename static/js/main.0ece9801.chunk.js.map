{"version":3,"sources":["utils/api.js","components/EmployeeSearch.js","components/EmployeeTable.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeSearch","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","EmployeeData","onClick","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","EmployeeContainer","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","handleSearch","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0ece9801.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    // Gets all users\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=300&nat=us\");\r\n    }\r\n};","import React from \"react\"\nimport \"./styles.css\";\n\nfunction EmployeeSearch(props) {\n\n    return (\n        <div className=\"container-fluid\">\n            <header className=\" col\" >\n                <div className=\"row\">\n                    <div className=\"col \">\n\n                        <h3 className=\"header\">Employee Directory</h3>\n\n                    </div>\n                    <div className=\"col s6 \">\n\n                        <div className=\"col s6 input right-align \">\n\n                            <input\n                                onChange={props.handleInputChange}\n                                value={props.value}\n                                id=\"employees\"\n                                type=\"text\"\n                                name=\"search\"\n                                list=\"employee\"\n                                className=\" inputBox  \"\n                                placeholder=\"Search by name\" />\n                        </div>\n                        \n                    </div>\n                </div>\n            </header>\n        </div >\n    )\n}\n\nexport default EmployeeSearch","import React from \"react\";\r\nimport Moment from 'react-moment';\r\nimport \"./styles.css\";\r\n\r\nfunction EmployeeData(props) {\r\n      return (\r\n        <table className=\"tableEmployee justify-content-center\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th onClick={props.sortByName}>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>E-mail</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className= \"tablebody\">\r\n                {props.results.map(result => (\r\n                    <tr className=\"table\" key={result.login.uuid}>\r\n                     \r\n\r\n                        <td> <img className=\"\r\n                        \"src={result.picture.medium} alt=\"\" /></td>\r\n                        \r\n                        <td>{result.name.first + \" \" + result.name.last}  </td>\r\n\r\n                        <td>{result.cell}</td>\r\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table >\r\n    )\r\n\r\n}\r\n\r\nexport default EmployeeData","\r\nimport React, { Component } from \"react\"\r\nimport API from \"../utils/api\";\r\nimport EmployeeSearch from \"./EmployeeSearch\"\r\nimport EmployeeData from \"./EmployeeTable\"\r\nimport \"./styles.css\";\r\n\r\n\r\nclass EmployeeContainer extends Component {\r\n\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        order: \"\"\r\n\r\n    };\r\n\r\n    // this is the initialization, what do you want the page to display when page it's first loaded\r\n    componentDidMount() {\r\n        API.getUsers().then(res => this.setState({\r\n            employees: res.data.results,\r\n            filteredEmployees: res.data.results\r\n        })).catch(err => console.log(err))\r\n    }\r\n\r\n    //if \"name\" it's clicked employee are shown by asc/desc order\r\n\r\n    sortByName = () => {\r\n        const filtereds = this.state.filteredEmployees;\r\n        if (this.state.order === \"asc\") {\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"desc\"\r\n            })\r\n        } else {\r\n\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"asc\"\r\n            })\r\n\r\n        }\r\n    }\r\n    //when input is changing it will dynamically show the associates names that match in the screen\r\n    handleInputChange = event => {\r\n\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\r\n        )\r\n        this.setState({\r\n            //change the state of  filteredEmployes now it holds all the employes that matches users\r\n            // search and will be passed down in this state\r\n\r\n            filteredEmployees,\r\n\r\n        });\r\n\r\n\r\n    };\r\n\r\n\r\n    //API call triggered when page it's refreshed and  when application it's loaded \r\n    employeeSearch = () => {\r\n        API.getUsers()\r\n            .then(res => this.setState({\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //when button search it's clicked\r\n    handleSearch = event => {\r\n        event.preventDefault();\r\n        if (!this.state.search) {\r\n            alert(\"Enter a name\")\r\n        }\r\n        const { employees, search } = this.state;\r\n\r\n        //filters the object looking for the value that matches\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\r\n\r\n        this.setState({\r\n            filteredEmployees\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <EmployeeSearch\r\n                    employee={this.state.employees}\r\n                    handleSearch={this.handleSearch}\r\n                    handleInputChange={this.handleInputChange} />\r\n                <EmployeeData results={this.state.filteredEmployees}\r\n                    sortByName={this.sortByName}\r\n\r\n                />\r\n            </div >\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeContainer","import React from 'react';\nimport EmployeeContainer from \"./components/EmployeeContainer\"\n\n\nfunction App() {\n  return (\n    <EmployeeContainer />\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}